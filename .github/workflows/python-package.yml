name: Python package

on:
  push:
    branches:
      - main
      - develop
jobs:
  build-windows:

    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - uses: actions/checkout@main
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pip install --upgrade cffi pywin32-ctypes
          pip install pefile
          pipenv install --deploy --system
          pipenv install --deploy --system --dev
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest
      - name: Create binary
        run: |
          pyinstaller pyaes256.spec
      - name: set version
        run: |
          $version = python setup.py --version
          echo "VERSION=$version" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: pyaes256-win64
          path: dist/pyaes256.exe
      - name: Zip Production Artifact
        run: Compress-Archive -Path dist/pyaes256.exe -DestinationPath dist/pyaes256-win64-${{ env.VERSION }}.zip


  build-linux:

    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [ 3.9 ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo apt-get install build-essential python3-dev python3-pip python3-setuptools python3-wheel python3-cffi libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libgdk-pixbuf2.0-0 libffi-dev shared-mime-info
          python -m pip install --upgrade pip pipenv setuptools wheel twine cffi pefile pyinstaller pytest flake8 atomicwrites
          pipenv install
          pipenv install --dev
      - name: Create binary
        run: |
          pipenv run pyinstaller pyaes256.spec
          mkdir bin
          mv dist/pyaes256 bin
      - name: Build and publish
        if: github.ref == 'refs/heads/master'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*
      - name: set version
        run: |
          touch VERSION.txt
          echo $(python setup.py --version) > VERSION.txt
          echo "VERSION=$(python setup.py --version)" >> $GITHUB_ENV
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: pyaes256-linux64
          path: |
            bin/pyaes256
            VERSION.txt
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        if: github.ref == 'refs/heads/master'
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: nalisdev/pyaes256:${{ env.VERSION }}

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download artifact from linux build job
        uses: actions/download-artifact@v2
        with:
          name: pyaes256-linux64
      - name: Download artifact from windows build job
        uses: actions/download-artifact@v2
        with:
          name: pyaes256-win64
      - name: set version
        run: |
          cat VERSION.txt
          echo "VERSION=$(cat VERSION.txt)" >> $GITHUB_ENV
      - name: compress assets
        run: |
          mv bin/pyaes256 pyaes256
          zip pyaes256-win64-$VERSION.zip pyaes256.exe
          tar -zcvf pyaes256-linux64-$VERSION.tar.gz pyaes256
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
      - name: Upload Windows Release Asset
        id: upload-windows-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: pyaes256-win64-${{ env.VERSION }}.zip
          asset_name: pyaes256-win64-${{ env.VERSION }}.zip
          asset_content_type: application/zip
      - name: Upload Linux Release Asset
        id: upload-linux-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: pyaes256-linux64-${{ env.VERSION }}.tar.gz
          asset_name: pyaes256-linux64-${{ env.VERSION }}.tar.gz
          asset_content_type: application/gzip
