name: Python package

on:
  push:
    branches:
      - main
jobs:
  build:

    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - uses: actions/checkout@main
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pip install --upgrade cffi pywin32-ctypes
          pip install pefile
          pipenv install --deploy --system
          pipenv install --deploy --system --dev
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest
#      steps:
#        - run: echo "0.1" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Create binary
        run: |
          pyinstaller pyaes256.spec
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        env:
          VERSION: 0.1
        with:
          name: pyaes256-win64-${{ env.VERSION }}
          path: dist/pyaes256.exe
#      - name: Create Release
#          id: create_release
#          uses: actions/create-release@v1
#          env:
#            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          with:
#            tag_name: ${{ github.ref }}
#            release_name: Release ${{ github.ref }}
#            draft: false
#            prerelease: false
#            - name: Upload Release Asset
#              id: upload-release-asset
#              uses: actions/upload-release-asset@v1
#              env:
#                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#              with:
#                upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#                asset_path: ./my-artifact.zip
#                asset_name: my-artifact.zip
#                asset_content_type: application/zip

